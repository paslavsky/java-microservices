{"version":3,"sources":["actions/index.js","actions/types.js","components/chart-card.js","components/dashboard.js","components/app-menu.js","components/sample-view.js","components/404.js","components/app.js","serviceWorker.js","reducers/index.js","reducers/gh-reducer.js","reducers/metrics-reducer.js","index.js"],"names":["fetchMetrics","url","dispatch","a","axios","get","response","type","payload","data","ChartCard","nextProps","nextState","nextContext","this","changeType","props","chartType","_","isEqual","chart","refresh","c","reinit","first","title","style","marginTop","ref","setChartRef","bind","React","Component","connect","state","avg","arr","reduce","b","length","statistics","Math","max","min","colors","zipObject","metrics","map","sample","name","random","toString","substr","samples","tags","uptime","labels","datasets","label","backgroundColor","run","memoryOnStart","warmingUp","requestTime","flatMap","tail","memoryOnWork","memory","it","useState","setChartType","className","paddingTop","width","value","options","onChange","e","height","ghRelease","version","sidebarVisible","setSidebarVisible","history","useHistory","go2","push","menuModel","icon","command","position","top","left","zIndex","marginRight","onClick","visible","onHide","showCloseIcon","border","model","SampleView","match","params","ownProps","find","NotFound","App","fetchGitHubRelease","loaded","exact","path","component","Dashboard","release","assets","browser_download_url","Boolean","window","location","hostname","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7be0152.chunk.js","sourcesContent":["import {LOAD_GH_RELEASE, LOAD_METRICS} from \"./types\";\nimport axios from 'axios';\n\nexport const fetchGitHubRelease = (release = 'latest') => async dispatch => {\n    const response = await axios.get(`https://api.github.com/repos/paslavsky/java-microservices/releases/${release}`);\n    dispatch({\n        type: LOAD_GH_RELEASE,\n        payload: response.data\n    });\n\n    fetchMetrics(response.data.assets.find(it => it.name === 'metrics.json').browser_download_url)(dispatch)\n};\n\nexport const fetchMetrics = url => async dispatch => {\n    const response = await axios.get(`https://cors-anywhere.herokuapp.com/${url}`);\n    dispatch({\n        type: LOAD_METRICS,\n        payload: response.data\n    });\n};\n","export const LOAD_GH_RELEASE='LOAD_GH_RELEASE';\nexport const LOAD_METRICS='LOAD_METRICS';\n","import React from 'react';\nimport {Card} from \"primereact/card\";\nimport {Chart} from \"primereact/chart\";\nimport * as PropTypes from \"prop-types\";\nimport _ from 'lodash'\n\nclass ChartCard extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        this.changeType = false;\n        if (this.props.chartType !== nextProps.chartType) {\n            this.changeType = true;\n            return true;\n        } else if (!_.isEqual(this.props.data, nextProps.data)) {\n            this.chart.refresh();\n            return true;\n        }\n        return !_.isEqual(this.props, nextProps);\n    }\n\n    setChartRef(c) {\n        if (!!this.changeType && !!c)\n            c.reinit();\n        this.chart = c;\n    }\n\n    render() {\n        const {first, title, chartType, data} = this.props;\n\n        return (\n            <Card title={title} style={{marginTop: !first ? '3em' : '0'}}>\n                <Chart type={chartType || \"bar\"} data={data} ref={this.setChartRef.bind(this)}/>\n            </Card>\n        );\n    }\n}\n\nChartCard.propTypes = {\n    first: PropTypes.bool,\n    title: PropTypes.string,\n    chartType: PropTypes.oneOf([\"bar\", \"horizontalBar\"]),\n    data: PropTypes.object\n};\n\nexport default ChartCard;\n","import React, {useState} from \"react\";\nimport {connect} from 'react-redux';\nimport _ from 'lodash';\nimport {Card} from \"primereact/card\";\nimport {ScrollPanel} from \"primereact/scrollpanel\";\nimport {SelectButton} from \"primereact/selectbutton\";\nimport ChartCard from \"./chart-card\";\n\nconst Dashboard = (props) => {\n    const [chartType, setChartType] = useState(\"bar\");\n    const types = [\n        {label: 'Vertical Bar', value: 'bar'},\n        {label: 'Horizontal Bar', value: 'horizontalBar'},\n    ];\n    return (\n        <div className=\"p-grid\">\n            <div className=\"p-sm-12 p-md-12 p-lg-4 p-xl-3\" style={{paddingTop: '5em'}}>\n                <div className=\"p-grid p-justify-around\">\n                    <Card style={{width: '280px'}}>\n                        <SelectButton value={chartType} options={types} onChange={(e) => setChartType(e.value)}/>\n                    </Card>\n                </div>\n            </div>\n            <div className=\"p-sm-12 p-md-12 p-lg-8 p-xl-6\">\n                <ScrollPanel style={{width: '100%', height: 'calc(100vh - 5.1em)', paddingTop: '5em'}}>\n                    <ChartCard title=\"Memory on start (Mb)\" chartType={chartType} data={props.memoryOnStart} first={true}/>\n\n                    <ChartCard title=\"Working memory (Mb)\" chartType={chartType} data={props.memoryOnWork}/>\n\n                    <ChartCard title=\"Uptime (ms)\" chartType={chartType} data={props.uptime}/>\n\n                    <ChartCard title=\"Warming up (ms)\" chartType={chartType} data={props.warmingUp}/>\n\n                    <ChartCard title=\"Request time (ms)\" chartType={chartType} data={props.requestTime}/>\n                </ScrollPanel>\n            </div>\n        </div>\n    );\n};\n\n\nconst mapStateToProps = state => {\n    const avg = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\n    const statistics = arr => ([avg(arr), Math.max(...arr), Math.min(...arr)]);\n\n    const colors = _.zipObject(\n        state.metrics.map(sample => (sample.name)),\n        state.metrics.map(() => ('#' + (0x1000000 + (Math.random()) * 0xffffff).toString(16).substr(1, 6)))\n    );\n\n    return ({\n        samples: _.zipObject(\n            state.metrics.map(sample => (sample.name)),\n            state.metrics.map(sample => (sample.tags))\n        ),\n        uptime: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.map(run => (run.uptime)))\n            }))\n        },\n        memoryOnStart: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.map(run => (run.memoryOnStart / 1024)))\n            }))\n        },\n        warmingUp: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.map(run => (run.requestTime[0])))\n            }))\n        },\n        requestTime: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.flatMap(run => (_.tail(run.requestTime))))\n            }))\n        },\n        memoryOnWork: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.flatMap(run => (run.memory)).map(it => (it / 1024)))\n            }))\n        }\n    });\n};\n\nexport default connect(\n    mapStateToProps,\n)(Dashboard);\n","import React, {useState} from \"react\";\nimport {Toolbar} from \"primereact/toolbar\";\nimport {Button} from \"primereact/button\";\nimport {connect} from \"react-redux\";\nimport {Sidebar} from \"primereact/sidebar\";\nimport {Menu} from \"primereact/menu\";\nimport {useHistory} from \"react-router-dom\";\n\nconst AppMenu = (props) => {\n    const [sidebarVisible, setSidebarVisible] = useState(false);\n    const history = useHistory();\n    const go2 = (url) => {\n        return () => {\n            history.push(url)\n        }\n    };\n\n    const menuModel = [\n        {\n            label: 'Dashboard',\n            icon: 'mdi pi-fw mdi-view-dashboard',\n            command: go2('/')\n        },\n        ...props.samples.map(it => ({\n            label: `${it.name} v${it.version}`,\n            command: go2(`/${it.name}`),\n            icon: 'pi pi-fw pi-angle-right'\n        }))\n    ];\n\n    return (\n        <>\n            <Toolbar style={{position: 'fixed', top: 1, width: 'calc(100% - 2px)', left: 1, zIndex: 1000}}>\n                <div className=\"p-toolbar-group-left\">\n                    <Button icon=\"mdi mdi-24 mdi-menu\" className=\"p-button-secondary\"\n                            style={{marginRight: '.25em'}}\n                            onClick={(e) => setSidebarVisible(true)}/>\n                </div>\n                <div className=\"p-toolbar-group-right\">\n                    <Button icon=\"mdi mdi-24 mdi-help\" className=\"p-button-secondary\"\n                            style={{marginRight: '.25em'}}/>\n                    <Button icon=\"mdi mdi-24 mdi-github-circle\" className=\"p-button-secondary\"/>\n                </div>\n            </Toolbar>\n\n            <Sidebar visible={sidebarVisible}\n                     onHide={(e) => setSidebarVisible(false)}\n                     showCloseIcon={false}\n            >\n                <Menu style={{width: '100%', border: 'none'}} model={menuModel}/>\n            </Sidebar>\n        </>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        ghRelease: state.ghRelease,\n        samples: state.metrics.map(it => ({\n            name: it.name,\n            version: it.version\n        }))\n    }\n};\n\nexport default connect(mapStateToProps)(AppMenu);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass SampleView extends Component {\n\n    componentDidMount() {\n        if (!this.props.sample) {\n            this.props.history.push('/404')\n        }\n    }\n\n    render() {\n        return (<h1 style={{paddingTop: '1em'}}>Sample {this.props.match.params.sample}</h1>)\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        sample: state.metrics.find(it => it.name === ownProps.match.params.sample)\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n)(SampleView);\n","import React from 'react';\n\nfunction NotFound() {\n    return (\n        <h1 className=\"app404\"><span className=\"mdi mdi-power-plug-off\"/>Not found</h1>\n    );\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {fetchGitHubRelease} from \"../actions\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport {ProgressSpinner} from \"primereact/progressspinner\";\nimport Dashboard from \"./dashboard\";\nimport AppMenu from \"./app-menu\";\nimport SampleView from \"./sample-view\";\nimport NotFound from \"./404\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.fetchGitHubRelease();\n    }\n\n    render() {\n        const loaded = this.props.loaded;\n        if (!loaded)\n            return (\n                <ProgressSpinner/>\n            );\n        return (\n            <HashRouter>\n                <AppMenu/>\n\n                <Switch>\n                    <Route exact path=\"/\" component={Dashboard}/>\n                    <Route exact path=\"/404\" component={NotFound}/>\n                    <Route exact path=\"/:sample\" component={SampleView}/>\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loaded: !!state.ghRelease && !!state.metrics\n    }\n};\n\nexport default connect(mapStateToProps, {fetchGitHubRelease})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport ghReducer from './gh-reducer';\nimport metricsReducer from './metrics-reducer';\n\nexport default combineReducers({\n    ghRelease: ghReducer,\n    metrics: metricsReducer\n});\n","import {LOAD_GH_RELEASE} from \"../actions/types\";\n\nexport default (state = null, action) => {\n    switch (action.type) {\n        case LOAD_GH_RELEASE: return action.payload;\n        default:\n            return state;\n    }\n};\n","import {LOAD_METRICS} from \"../actions/types\";\n\nexport default (state = null, action) => {\n    switch (action.type) {\n        case LOAD_METRICS: return action.payload;\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\nimport '@mdi/font/css/materialdesignicons.min.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}