{"version":3,"sources":["actions/index.js","actions/types.js","components/chart-card.js","components/tags-card.js","components/dashboard.js","components/app-menu.js","components/sample-view.js","components/404.js","components/app.js","serviceWorker.js","reducers/index.js","reducers/gh-reducer.js","reducers/metrics-reducer.js","index.js"],"names":["fetchMetrics","releaseId","assetId","url","dispatch","a","dataStr","localStorage","getItem","data","JSON","parse","axios","get","catch","reason","encodeURIComponent","response","contents","setItem","stringify","type","payload","ChartCard","nextProps","nextState","nextContext","this","changeType","props","chartType","_","isEqual","c","reinit","chart","first","title","samples","style","marginTop","clone","datasets","filter","it","find","s","name","label","ref","setChartRef","bind","React","Component","TagsCard","tags","flatMap","forEach","tag","value","count","push","width","minSize","maxSize","connect","state","avg","arr","reduce","b","length","statistics","Math","max","min","colors","zipObject","metrics","map","sample","randomColor","uniq","uptime","labels","backgroundColor","run","memoryOnStart","warmingUp","requestTime","tail","memoryOnWork","memory","useState","setChartType","setTags","setSamples","tagsSuggestions","setTagsSuggestions","className","paddingTop","options","onChange","e","suggestions","completeMethod","event","setTimeout","results","toLowerCase","indexOf","query","minLength","placeholder","multiple","intersection","optionLabel","itemTemplate","item","classes","paddingRight","onClick","height","ghRelease","version","sidebarVisible","setSidebarVisible","history","useHistory","go2","menuModel","icon","command","position","top","left","zIndex","marginRight","visible","onHide","showCloseIcon","border","model","SampleView","match","params","ownProps","NotFound","App","fetchGitHubRelease","loaded","exact","path","component","Dashboard","release","metricsAsset","assets","id","browser_download_url","Boolean","window","location","hostname","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.4ec88909.chunk.js","sourcesContent":["import {LOAD_GH_RELEASE, LOAD_METRICS} from \"./types\";\nimport axios from 'axios';\n\nexport const fetchGitHubRelease = (release = 'latest') => async dispatch => {\n    const response = await axios.get(`https://api.github.com/repos/paslavsky/java-microservices/releases/${release}`);\n    dispatch({\n        type: LOAD_GH_RELEASE,\n        payload: response.data\n    });\n\n    const metricsAsset = response.data.assets.find(it => it.name === 'metrics.json');\n    fetchMetrics(response.data.id, metricsAsset.id, metricsAsset.browser_download_url)(dispatch)\n};\n\nexport const fetchMetrics = (releaseId, assetId, url) => async dispatch => {\n    let data;\n    const dataStr = localStorage.getItem(`${releaseId}:${assetId}`);\n    if (dataStr) {\n        data = JSON.parse(dataStr);\n    } else {\n        const response = await axios.get(`https://cors-anywhere.herokuapp.com/${url}`).catch(reason =>\n            (axios.get('https://api.allorigins.win/get?url=' + encodeURIComponent(url)))\n        );\n        data = response.data.contents ? JSON.parse(response.data.contents) : response.data;\n        localStorage.setItem(`${releaseId}:${assetId}`, JSON.stringify(data));\n    }\n\n    dispatch({\n        type: LOAD_METRICS,\n        payload: data\n    });\n};\n","export const LOAD_GH_RELEASE='LOAD_GH_RELEASE';\nexport const LOAD_METRICS='LOAD_METRICS';\n","import React from 'react';\nimport {Card} from \"primereact/card\";\nimport {Chart} from \"primereact/chart\";\nimport * as PropTypes from \"prop-types\";\nimport _ from 'lodash'\n\nclass ChartCard extends React.Component {\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        this.changeType = false;\n        if (this.props.chartType !== nextProps.chartType) {\n            this.changeType = true;\n            return true;\n        }\n        return !_.isEqual(this.props, nextProps);\n    }\n\n    setChartRef(c) {\n        if (!!this.changeType && c)\n            c.reinit();\n        this.chart = c;\n        this.changeType = false;\n    }\n\n    render() {\n        const {first, title, chartType, data, samples} = this.props;\n        const filter = (data, samples) => {\n            data = _.clone(data);\n            data.datasets = data.datasets.filter((it) => _.find(samples, (s) => s.name === it.label));\n            return data;\n        };\n\n        return (\n            <Card title={title} style={{marginTop: !first ? '3em' : '0'}}>\n                <Chart type={chartType || \"bar\"} data={filter(data, samples)} ref={this.setChartRef.bind(this)}/>\n            </Card>\n        );\n    }\n}\n\nChartCard.propTypes = {\n    first: PropTypes.bool,\n    title: PropTypes.string,\n    chartType: PropTypes.oneOf([\"bar\", \"horizontalBar\"]),\n    data: PropTypes.object,\n    samples: PropTypes.array\n};\n\nexport default ChartCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {TagCloud} from 'react-tagcloud'\nimport {Card} from \"primereact/card\";\nimport _ from 'lodash'\n\nconst TagsCard = props => {\n    const tags = [];\n    _.flatMap(props.samples, (it) => it.tags).forEach(it => {\n        let tag = _.find(tags, {value: it});\n        if (!tag) {\n            tag = {value: it, count: 0};\n            tags.push(tag);\n        }\n        tag.count += 1;\n    });\n    debugger\n    return (\n        <Card style={{width: '280px', marginTop: '10px'}}>\n            <TagCloud\n                minSize={12}\n                maxSize={35}\n                tags={tags}\n            />\n        </Card>\n    );\n};\n\nTagsCard.propTypes = {\n    samples: PropTypes.array\n};\n\nexport default TagsCard;\n","import React, {useState} from \"react\";\nimport {connect} from 'react-redux';\nimport _ from 'lodash';\nimport {Card} from \"primereact/card\";\nimport {ScrollPanel} from \"primereact/scrollpanel\";\nimport {SelectButton} from \"primereact/selectbutton\";\nimport ChartCard from \"./chart-card\";\nimport {AutoComplete} from \"primereact/autocomplete\";\nimport {ListBox} from \"primereact/listbox\";\nimport {Button} from \"primereact/button\";\nimport randomColor from 'randomcolor';\nimport TagsCard from \"./tags-card\";\n\nconst Dashboard = (props) => {\n    const [chartType, setChartType] = useState(\"bar\");\n    const [tags, setTags] = useState(null);\n    const [samples, setSamples] = useState(props.samples);\n    const [tagsSuggestions, setTagsSuggestions] = useState(null);\n    const types = [\n        {label: 'Vertical Bar', value: 'bar'},\n        {label: 'Horizontal Bar', value: 'horizontalBar'},\n    ];\n\n    const filterTags = (event) => {\n        setTimeout(() => {\n            const results = props.tags.filter(tag => (tag.toLowerCase().indexOf(event.query.toLowerCase()) >= 0));\n            setTagsSuggestions(results)\n        }, 250);\n    };\n\n    const renderListItem = (item) => {\n        const classes = !!samples.find((it) => it.name === item.name) ?\n            \"mdi mdi-checkbox-marked-outline mdi-18\" : \"mdi mdi-checkbox-blank-outline mdi-18\";\n        return (<span><i className={classes} style={{paddingRight: '5px'}}/>{item.name}</span>);\n    };\n\n    const selectTags = (e) => {\n        const tags = e.value;\n        setTags(tags);\n        if (tags.length > 0) {\n            setSamples(props.samples.filter((it) => _.intersection(it.tags, tags).length > 0));\n        }\n    };\n\n    return (\n        <div className=\"p-grid\">\n            <div className=\"p-sm-12 p-md-12 p-lg-4 p-xl-3\" style={{paddingTop: '5em'}}>\n                <div className=\"p-grid p-justify-around\">\n                    <Card style={{width: '280px'}}>\n                        <div className=\"p-grid p-dir-col\">\n                            <div className=\"p-col\">\n                                <SelectButton value={chartType} options={types}\n                                              onChange={(e) => setChartType(e.value)}/>\n                            </div>\n                            <div className=\"p-col\">\n                                <AutoComplete value={tags} suggestions={tagsSuggestions} completeMethod={filterTags}\n                                              minLength={1} placeholder=\"Tags\" multiple={true} className=\"tags-search\"\n                                              onChange={selectTags}/>\n                            </div>\n                            <div className=\"p-col\">\n                                <ListBox value={samples} options={props.samples} className=\"samples-list\"\n                                         onChange={(e) => setSamples(e.value)}\n                                         filter={true} multiple={true} optionLabel=\"name\"\n                                         itemTemplate={renderListItem}\n                                />\n\n                                <div className=\"p-grid app-tools\">\n                                    <div className=\"p-col\">\n                                        <Button label=\"Select All\" className=\"p-button-raised p-button-secondary\"\n                                                onClick={() => setSamples(props.samples)}\n                                        />\n                                    </div>\n                                    <div className=\"p-col\">\n                                        <Button label=\"Clear All\" className=\"p-button-raised p-button-secondary\"\n                                                onClick={() => setSamples([])}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </Card>\n\n                    <TagsCard samples={props.samples}/>\n                </div>\n            </div>\n            <div className=\"p-sm-12 p-md-12 p-lg-8 p-xl-6\">\n                <ScrollPanel style={{width: '100%', height: 'calc(100vh - 5.1em)', paddingTop: '5em'}}>\n                    <ChartCard title=\"Memory on start (Mb)\" chartType={chartType} data={props.memoryOnStart}\n                               first={true} samples={samples}/>\n\n                    <ChartCard title=\"Working memory (Mb)\" chartType={chartType} data={props.memoryOnWork}\n                               samples={samples}/>\n\n                    <ChartCard title=\"Uptime (ms)\" chartType={chartType} data={props.uptime}\n                               samples={samples}/>\n\n                    <ChartCard title=\"Warming up (ms)\" chartType={chartType} data={props.warmingUp}\n                               samples={samples}/>\n\n                    <ChartCard title=\"Request time (ms)\" chartType={chartType} data={props.requestTime}\n                               samples={samples}/>\n                </ScrollPanel>\n            </div>\n        </div>\n    );\n};\n\n\nconst mapStateToProps = state => {\n    const avg = arr => arr.reduce((a, b) => a + b, 0) / arr.length;\n    const statistics = arr => ([avg(arr), Math.max(...arr), Math.min(...arr)]);\n\n    const colors = _.zipObject(\n        state.metrics.map(sample => (sample.name)),\n        state.metrics.map(() => (randomColor()))\n    );\n\n    return ({\n        samples: state.metrics.map(sample => ({name: sample.name, tags: sample.tags})),\n        tags: _.uniq(_.flatMap(state.metrics.map(sample => (sample.tags)))),\n        uptime: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.map(run => (run.uptime)))\n            }))\n        },\n        memoryOnStart: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.map(run => (run.memoryOnStart / 1024)))\n            }))\n        },\n        warmingUp: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.map(run => (run.requestTime[0])))\n            }))\n        },\n        requestTime: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.flatMap(run => (_.tail(run.requestTime))))\n            }))\n        },\n        memoryOnWork: {\n            labels: ['Avg', 'Max', 'Min'],\n            datasets: state.metrics.map(sample => ({\n                label: sample.name,\n                backgroundColor: colors[sample.name],\n                data: statistics(sample.metrics.flatMap(run => (run.memory)).map(it => (it / 1024)))\n            }))\n        }\n    });\n};\n\nexport default connect(\n    mapStateToProps,\n)(Dashboard);\n","import React, {useState} from \"react\";\nimport {Toolbar} from \"primereact/toolbar\";\nimport {Button} from \"primereact/button\";\nimport {connect} from \"react-redux\";\nimport {Sidebar} from \"primereact/sidebar\";\nimport {Menu} from \"primereact/menu\";\nimport {useHistory} from \"react-router-dom\";\n\nconst AppMenu = (props) => {\n    const [sidebarVisible, setSidebarVisible] = useState(false);\n    const history = useHistory();\n    const go2 = (url) => {\n        return () => {\n            history.push(url)\n        }\n    };\n\n    const menuModel = [\n        {\n            label: 'Dashboard',\n            icon: 'mdi pi-fw mdi-view-dashboard',\n            command: go2('/')\n        },\n        ...props.samples.map(it => ({\n            label: `${it.name} v${it.version}`,\n            command: go2(`/${it.name}`),\n            icon: 'pi pi-fw pi-angle-right'\n        }))\n    ];\n\n    return (\n        <>\n            <Toolbar style={{position: 'fixed', top: 1, width: 'calc(100% - 2px)', left: 1, zIndex: 1000}}>\n                <div className=\"p-toolbar-group-left\">\n                    <Button icon=\"mdi mdi-24 mdi-menu\" className=\"p-button-secondary\"\n                            style={{marginRight: '.25em'}}\n                            onClick={(e) => setSidebarVisible(true)}/>\n                </div>\n                <div className=\"p-toolbar-group-right\">\n                    <Button icon=\"mdi mdi-24 mdi-help\" className=\"p-button-secondary\"\n                            style={{marginRight: '.25em'}}/>\n                    <Button icon=\"mdi mdi-24 mdi-github-circle\" className=\"p-button-secondary\"/>\n                </div>\n            </Toolbar>\n\n            <Sidebar visible={sidebarVisible}\n                     onHide={(e) => setSidebarVisible(false)}\n                     showCloseIcon={false}\n            >\n                <Menu style={{width: '100%', border: 'none'}} model={menuModel}/>\n            </Sidebar>\n        </>\n    );\n};\n\nconst mapStateToProps = state => {\n    return {\n        ghRelease: state.ghRelease,\n        samples: state.metrics.map(it => ({\n            name: it.name,\n            version: it.version\n        }))\n    }\n};\n\nexport default connect(mapStateToProps)(AppMenu);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass SampleView extends Component {\n\n    componentDidMount() {\n        if (!this.props.sample) {\n            this.props.history.push('/404')\n        }\n    }\n\n    render() {\n        return (<h1 style={{paddingTop: '1em'}}>Sample {this.props.match.params.sample}</h1>)\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        sample: state.metrics.find(it => it.name === ownProps.match.params.sample)\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n)(SampleView);\n","import React from 'react';\n\nfunction NotFound() {\n    return (\n        <h1 className=\"app404\"><span className=\"mdi mdi-power-plug-off\"/>Not found</h1>\n    );\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {fetchGitHubRelease} from \"../actions\";\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport {ProgressSpinner} from \"primereact/progressspinner\";\nimport Dashboard from \"./dashboard\";\nimport AppMenu from \"./app-menu\";\nimport SampleView from \"./sample-view\";\nimport NotFound from \"./404\";\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.fetchGitHubRelease();\n    }\n\n    render() {\n        const loaded = this.props.loaded;\n        if (!loaded)\n            return (\n                <ProgressSpinner/>\n            );\n        return (\n            <HashRouter>\n                <AppMenu/>\n\n                <Switch>\n                    <Route exact path=\"/\" component={Dashboard}/>\n                    <Route exact path=\"/404\" component={NotFound}/>\n                    <Route exact path=\"/:sample\" component={SampleView}/>\n                </Switch>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loaded: !!state.ghRelease && !!state.metrics\n    }\n};\n\nexport default connect(mapStateToProps, {fetchGitHubRelease})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport ghReducer from './gh-reducer';\nimport metricsReducer from './metrics-reducer';\n\nexport default combineReducers({\n    ghRelease: ghReducer,\n    metrics: metricsReducer\n});\n","import {LOAD_GH_RELEASE} from \"../actions/types\";\n\nexport default (state = null, action) => {\n    switch (action.type) {\n        case LOAD_GH_RELEASE: return action.payload;\n        default:\n            return state;\n    }\n};\n","import {LOAD_METRICS} from \"../actions/types\";\n\nexport default (state = null, action) => {\n    switch (action.type) {\n        case LOAD_METRICS: return action.payload;\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\nimport '@mdi/font/css/materialdesignicons.min.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport reduxThunk from 'redux-thunk';\nimport reducers from './reducers'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(reduxThunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}